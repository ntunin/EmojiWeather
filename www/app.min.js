angular.module("app",["ionic","app.routes","app.directives"]).run(["$ionicPlatform",function(o){o.ready(function(){window.cordova&&window.cordova.plugins&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault()})}]);
angular.module("app.directives",[]).directive("blankDirective",[function(){}]).directive("background",function(){return{restrict:"A",link:function(i,c,r){i.$broadcast("scroll.resize")},compile:function(i,c){i.html('<div class = "background" style = "background-image: url({{background}});"></div>')}}});
angular.module("app.routes",[]).config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("overview",{url:"/overview",templateUrl:"templates/overview.html",controller:"overviewCtrl"}).state("login",{url:"/login",templateUrl:"templates/login.html",controller:"loginCtrl"}).state("preview",{url:"/preview",templateUrl:"templates/preview.html",controller:"previewCtrl"}).state("error",{url:"/login_error",templateUrl:"templates/error.html",controller:"errorCtrl"}).state("main",{url:"/main_screen",templateUrl:"templates/main.html",controller:"mainCtrl"}).state("menu",{url:"/menu",templateUrl:"templates/menu.html",controller:"menuCtrl"}).state("weeklyForecast",{url:"/weekly",templateUrl:"templates/weeklyForecast.html",controller:"weeklyForecastCtrl"}).state("hourlyForecast",{url:"/hourly",templateUrl:"templates/hourlyForecast.html",controller:"hourlyForecastCtrl"}).state("map",{url:"/map",templateUrl:"templates/map.html",controller:"mapCtrl"}).state("addEmojis",{url:"/add_emojis",templateUrl:"templates/addEmojis.html",controller:"addEmojisCtrl"}).state("search",{url:"/search",templateUrl:"templates/search.html",controller:"searchCtrl"}).state("backgroundSelection",{url:"/page12",templateUrl:"templates/backgroundSelection.html",controller:"backgroundSelectionCtrl"}),t.otherwise("/overview")}]);
angular.module("app").controller("addEmojisCtrl",["$scope","$state","Background",function(o,a,t){t.setup(o,a)}]);
angular.module("app").controller("backgroundSelectionCtrl",["$scope","$state","Background",function(e,t,c){var n=c.setup(e,t);e.backgrounds=c.list(),e.select=function(e){n.set(e)},e.isSelected=function(e){return c.isSelected(e)?"background-selected":""}}]);
angular.module("app").controller("errorCtrl",["$scope",function(r){}]);
angular.module("app").controller("hourlyForecastCtrl",["$scope","$state","Background","Weather","UserData",function(o,t,e,n,r){function a(t){o.hourlyForecast=t}function u(o){}e.setup(o,t);var c=r();n(c.location,"hourly").then(a,u),o.moment=moment}]);
angular.module("app").controller("loginCtrl",["$scope","$state","Background","UserData","Location",function(o,t,a,n,s){a.setup(o,t),o.user={name:"nik",location:{state:"siberia",country:"russia",city:"omsk"}},o.submit=function(){n(o.user),s(o.user.location)}}]);
angular.module("app").controller("mainCtrl",["$scope","$state","Background","$stateParams","UserData","Weather","Location","$ionicPopup",function(n,t,a,e,o,c,r,i){function u(){function t(t){n.hourlyForecast=t}function a(n){i.alert({title:"Warning",template:n})}n.moment=moment;var e=o();n.username=e.name,n.location=r();setInterval(function(){n.date=new Date,n.$apply()},1e3);c(n.location,"hourly").then(t,a)}a.setup(n,t),n.$on("$stateChangeSuccess",function(n,t,a,e,o){"main"===t.name&&u()})}]);
angular.module("app").controller("menuCtrl",["$scope","$state","Background",function(e,n,o){o.setup(e,n)}]);
angular.module("app").controller("overviewCtrl",["$scope","$state","Background","UserData",function(a,e,o,r){o.setup(a,e),r()&&e.go("main")}]);
angular.module("app").controller("previewCtrl",["$scope","$state","Background","UserData",function(e,t,a,n){a.setup(e,t),e.user=n(),e.submit=function(){t.go("main")}}]);
angular.module("app").controller("searchCtrl",["$scope","$state","Background","Location",function(t,o,c,n){c.setup(t,o),t.location={state:"",country:"",city:""},t.submit=function(){n(t.location)}}]);
angular.module("app").controller("weeklyForecastCtrl",["$scope","$state","Background","Weather","UserData",function(t,n,e,o,r){function a(n){function e(t){function n(t){return moment(t.date).format("ddd")}for(var e={},o=0;o<t.length;o++){var r=t[o],a=n(r);e[a]=e[a]||[],e[a].push(r)}return e}t.forecast=e(n)}function u(t){}e.setup(t,n);var c=r();o(c.location,"hourly10day").then(a,u),t.moment=moment}]);
angular.module("app").controller("mapCtrl",["$scope","$state","Map",function(a,p,l){l("map-canvas")}]);
angular.module("app").service("Background",function(){function n(n,t){function c(t){g=t,n.background=g}return n.background=g,n.$on("$stateChangeSuccess",function(c,o,a,e,r){o.name===t.current.name&&g!==n.background&&(n.background=g)}),{set:c}}function t(){return r}function c(n,t){o(),a(n,t),g=localStorage.userBackground||r[0]}function o(){var n=localStorage.backgrounds;n&&(n=n.split(" "),r.concat(n))}function a(n,t){function c(n,t){var c="http://wallpaperscraft.ru/image/priroda_gory_nebo_ozero_oblaka_81150_1920x1080.jpg",a="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQEyIqhnqQgXLoL_Ho76-rXQvB5cKI_gyEHPgGYgp8nQC6OCGql",e="https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcRX6J0BQoXqYPAoZNh2lq855jb7DcPb2oK6gMgK3lgTmgj8jsHL",r="https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcSzgt2HXZ6g3jnJoUezcxqob8xLQmDyUlNG3CDICeeQ7td06a4a",g=[c,a,e,r];o(g)}function o(n){r=r||[],r=r.concat(n)}c(n,t)}function e(n){return g===n}var r,g;return c(),{setup:n,list:t,isSelected:e}});
angular.module("app").service("Location",["UserData",function(n){var a,o=n();return o&&(a=o.location),function(n){return n?void(a=n):a}}]);
angular.module("app").service("UserData",function(){function r(){if(!n){var r=localStorage.ew_user;console.log(r),r&&(n=JSON.parse(r))}return n}function e(r){n=r,localStorage.ew_user=JSON.stringify(n)}var n;return function(o){return o?void e(o):n=r()}});
angular.module("app").service("Weather",["$http","config",function(n,r){function o(o,t){return new Promise(function(e,i){function u(){function n(){for(var n="/"+t+"/q",r=["country","state","city"],e=0;e<r.length;e++){var i=r[e];o[i]&&o[i].length>0&&(n+="/"+o[i])}return n+".json"}var e=n(),i="http://api.wunderground.com/api/"+r.wundergroundApiKey+e;return i}function a(n){function r(){return{condition:u.condition,icon:u.icon_url,date:new Date(1e3*u.FCTTIME.epoch)}}var o=[],t=n.data.hourly_forecast;if(!t)return void c(n.data.response);for(var i=0;i<t.length;i++){var u=t[i],a=r();o.push(a)}e(o)}function c(n){i(n.error?error.description:"Geo info is not enough"),i(error)}var f=u();n.get(f).then(a,c)})}return o}]);
angular.module("app").service("config",function(){return{openWeatherApiKey:"7d7815cd5721b778c79d97dff92ea533",wundergroundApiKey:"a7f3e44e9dfd4036"}});
//# sourceMappingURL=data:application/json;base64,
